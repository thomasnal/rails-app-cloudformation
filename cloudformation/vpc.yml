AWSTemplateFormatVersion: '2010-09-09'
Description: "VPC networking"


Parameters:
  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to SSH to the EC2 instances
    MaxLength: '18'
    MinLength: '9'
    Type: String  


Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
    PrivateOne:
      CIDR: '10.0.2.0/24'
    PrivateTwo:
      CIDR: '10.0.3.0/24'


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
      MapPublicIpOnLaunch: true

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetOne'
      RouteTableId: !Ref 'PublicRouteTable'

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetTwo'
      RouteTableId: !Ref 'PublicRouteTable'

  # NatGatewayOneAttachment:
  #   Type: AWS::EC2::EIP
  #   DependsOn: GatewayAttachement
  #   Properties:
  #     Domain: vpc
  #
  # NatGatewayOne:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
  #     SubnetId: !Ref PublicSubnetOne
  #
  # PrivateRouteTableOne:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref 'VPC'
  #
  # PrivateRouteOne:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref 'PrivateRouteTableOne'
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref 'NatGatewayOne'
  #
  # PrivateRouteTableOneAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref 'PrivateRouteTableOne'
  #     SubnetId: !Ref 'PrivateSubnetOne'

  # NatGatewayTwoAttachment:
  #   Type: AWS::EC2::EIP
  #   DependsOn: GatewayAttachement
  #   Properties:
  #     Domain: vpc
  #
  # NatGatewayTwo:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
  #     SubnetId: !Ref PublicSubnetTwo
  #
  # PrivateRouteTableTwo:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref 'VPC'
  #
  # PrivateRouteTwo:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref 'PrivateRouteTableTwo'
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref 'NatGatewayTwo'
  #
  # PrivateRouteTableTwoAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref 'PrivateRouteTableTwo'
  #     SubnetId: !Ref 'PrivateSubnetTwo'

  # Load Balancing
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'ALBTargetGroup'
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health_check
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref 'VPC'
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 30

  # Security Groups
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access locked down to the load balancer and SSH access
      SecurityGroupIngress:
        - FromPort: 80
          IpProtocol: tcp
          SourceSecurityGroupId:
            Fn::Select:
              - 0
              - !GetAtt ApplicationLoadBalancer.SecurityGroups
          ToPort: 80
        - CidrIp: !Ref SSHLocation
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
      VpcId: !Ref 'VPC'

  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Open database access from WebServers"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt WebServerSecurityGroup.GroupId
      VpcId: !Ref 'VPC'

  DbSubnetGroup: 
    Properties: 
      DBSubnetGroupDescription: db_subnet_group
      SubnetIds: 
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
    Type: AWS::RDS::DBSubnetGroup


Outputs:
  DbSecurityGroupId:
    Value: !GetAtt DbSecurityGroup.GroupId
    Export:
      Name: DbSecurityGroupId

  DbSubnetGroupName:
    Value: !Ref DbSubnetGroup
    Export:
      Name: DbSubnetGroupName

  WebsiteURL:
    Value: !Sub |
      http://${ApplicationLoadBalancer.DNSName}

  WebServerALBTargetGroupArn:
    Value: !Ref ALBTargetGroup
    Export:
      Name: WebServerALBTargetGroupArn

  WebServerSecurityGroupId:
    Value: !GetAtt WebServerSecurityGroup.GroupId
    Export:
      Name: WebServerSecurityGroupId

  WebServerSubnetOneId:
    Value: !Ref PublicSubnetOne
    Export:
      Name: WebServerSubnetOneId

  WebServerSubnetTwoId:
    Value: !Ref PublicSubnetTwo
    Export:
      Name: WebServerSubnetTwoId
